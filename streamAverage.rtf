{\rtf1\ansi\ansicpg1252\cocoartf1561
{\fonttbl\f0\fmodern\fcharset0 CourierNewPS-BoldMT;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red10\green82\blue135;\red255\green255\blue255;\red0\green0\blue0;
\red217\green217\blue217;\red15\green114\blue1;\red18\green139\blue2;\red0\green0\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c40000\c60000;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c87843\c87843\c87843;\cssrgb\c0\c50980\c0;\cssrgb\c0\c60000\c0;\cssrgb\c0\c0\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl286\partightenfactor0

\f0\b\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 class
\f1\b0 \cf4 \strokec4  GFG \{ \
\'a0\'a0\
\pard\pardeftab720\sl286\partightenfactor0
\cf4 \cb5 \'a0\'a0\'a0\'a0\cf6 \strokec6 // Returns the new average after including x \cf4 \strokec4 \
\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 static
\f1\b0 \cf4 \strokec4  
\f0\b \cf2 \strokec2 float
\f1\b0 \cf4 \strokec4  getAvg(
\f0\b \cf2 \strokec2 float
\f1\b0 \cf4 \strokec4  prev_avg, 
\f0\b \cf2 \strokec2 float
\f1\b0 \cf4 \strokec4  x, 
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  n) \
\'a0\'a0\'a0\'a0\{ \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 return
\f1\b0 \cf4 \strokec4  (prev_avg * n + x) / (n + \cf7 \strokec7 1\cf4 \strokec4 ); \
\'a0\'a0\'a0\'a0\} \
\pard\pardeftab720\sl286\partightenfactor0
\cf4 \cb3 \'a0\'a0\
\'a0\'a0\'a0\'a0\cf6 \strokec6 // Prints average of a stream of numbers \cf4 \strokec4 \
\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 static
\f1\b0 \cf4 \strokec4  
\f0\b \cf2 \strokec2 void
\f1\b0 \cf4 \strokec4  streamAvg(
\f0\b \cf2 \strokec2 float
\f1\b0 \cf4 \strokec4  arr[], 
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  n) \
\'a0\'a0\'a0\'a0\{ \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 float
\f1\b0 \cf4 \strokec4  avg = \cf7 \strokec7 0\cf4 \strokec4 ; \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 for
\f1\b0 \cf4 \strokec4  (
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  i = \cf7 \strokec7 0\cf4 \strokec4 ; i < n; i++)\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{ \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0avg = getAvg(avg, arr[i], i); \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0System.out.printf(\cf8 \strokec8 "Average of %d numbers is %f \\n"\cf4 \strokec4 , \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0i + \cf7 \strokec7 1\cf4 \strokec4 , avg); \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\} \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 return
\f1\b0 \cf4 \strokec4 ; \
\'a0\'a0\'a0\'a0\} \
\'a0\'a0\
\'a0\'a0\'a0\'a0\cf6 \strokec6 // Driver program to test above functions \cf4 \strokec4 \
\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 public
\f1\b0 \cf4 \strokec4  
\f0\b \cf2 \strokec2 static
\f1\b0 \cf4 \strokec4  
\f0\b \cf2 \strokec2 void
\f1\b0 \cf4 \strokec4  main(String[] args) \
\'a0\'a0\'a0\'a0\{ \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 float
\f1\b0 \cf4 \strokec4  arr[] = \{ \cf7 \strokec7 10\cf4 \strokec4 , \cf7 \strokec7 20\cf4 \strokec4 , \cf7 \strokec7 30\cf4 \strokec4 , \cf7 \strokec7 40\cf4 \strokec4 , \cf7 \strokec7 50\cf4 \strokec4 , \cf7 \strokec7 60\cf4 \strokec4  \}; \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  n = arr.length; \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0streamAvg(arr, n); \
\'a0\'a0\'a0\'a0\} \
\}\
}