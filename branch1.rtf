{\rtf1\ansi\ansicpg1252\cocoartf1561
{\fonttbl\f0\fmodern\fcharset0 CourierNewPS-BoldMT;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red10\green82\blue135;\red255\green255\blue255;\red0\green0\blue0;
\red15\green114\blue1;\red217\green217\blue217;\red18\green139\blue2;\red0\green0\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c40000\c60000;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c0\c50980\c0;\cssrgb\c87843\c87843\c87843;\cssrgb\c0\c60000\c0;\cssrgb\c0\c0\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl286\partightenfactor0

\f0\b\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import
\f1\b0 \cf4 \strokec4  java.util.*; \
\'a0\'a0\

\f0\b \cf2 \strokec2 class
\f1\b0 \cf4 \strokec4  SortWave \
\{ \
\'a0\'a0\'a0\'a0\cf5 \strokec5 // A utility method to swap two numbers. \cf4 \strokec4 \
\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 void
\f1\b0 \cf4 \strokec4  swap(
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  arr[], 
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  a, 
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  b) \
\'a0\'a0\'a0\'a0\{ \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  temp = arr[a]; \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0arr[a] = arr[b]; \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0arr[b] = temp; \
\'a0\'a0\'a0\'a0\} \
\'a0\'a0\
\pard\pardeftab720\sl286\partightenfactor0
\cf4 \cb6 \'a0\'a0\'a0\'a0\cf5 \strokec5 // This function sorts arr[0..n-1] in wave form, i.e., \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf5 \strokec5 // arr[0] >= arr[1] <= arr[2] >= arr[3] <= arr[4].. \cf4 \strokec4 \
\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 void
\f1\b0 \cf4 \strokec4  sortInWave(
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  arr[], 
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  n) \
\'a0\'a0\'a0\'a0\{ \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \strokec5 // Sort the input array \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Arrays.sort(arr); \
\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \strokec5 // Swap adjacent elements \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 for
\f1\b0 \cf4 \strokec4  (
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  i=\cf7 \strokec7 0\cf4 \strokec4 ; i<n-\cf7 \strokec7 1\cf4 \strokec4 ; i += \cf7 \strokec7 2\cf4 \strokec4 ) \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0swap(arr, i, i+\cf7 \strokec7 1\cf4 \strokec4 ); \
\'a0\'a0\'a0\'a0\} \
\pard\pardeftab720\sl286\partightenfactor0
\cf4 \cb3 \'a0\'a0\
\'a0\'a0\'a0\'a0\cf5 \strokec5 // Driver method \cf4 \strokec4 \
\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 public
\f1\b0 \cf4 \strokec4  
\f0\b \cf2 \strokec2 static
\f1\b0 \cf4 \strokec4  
\f0\b \cf2 \strokec2 void
\f1\b0 \cf4 \strokec4  main(String args[]) \
\'a0\'a0\'a0\'a0\{ \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0SortWave ob = 
\f0\b \cf2 \strokec2 new
\f1\b0 \cf4 \strokec4  SortWave(); \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  arr[] = \{\cf7 \strokec7 10\cf4 \strokec4 , \cf7 \strokec7 90\cf4 \strokec4 , \cf7 \strokec7 49\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 5\cf4 \strokec4 , \cf7 \strokec7 23\cf4 \strokec4 \}; \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  n = arr.length; \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0ob.sortInWave(arr, n); \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b \cf2 \strokec2 for
\f1\b0 \cf4 \strokec4  (
\f0\b \cf2 \strokec2 int
\f1\b0 \cf4 \strokec4  i : arr) \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0System.out.print(i + \cf8 \strokec8 " "\cf4 \strokec4 ); \
\'a0\'a0\'a0\'a0\} \
\}\
}